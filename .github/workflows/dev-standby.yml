# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation..
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: dev-standby-cicd

on:
  push:
    branches: [ "dev-standby" ]
  pull_request:
    branches: [ "dev-standby" ]

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: teacherforboss-cicd-bucket
  AWS_CODE_DEPLOY_APPLICATION: teacherforboss-CICD-dev
  AWS_CODE_DEPLOY_GROUP: teacherforboss-CICD-dev-group-standby

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*',
            '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: make script file (profile setting)
        run: |
          echo '${{ secrets.MAIN_STANDBY_START_SCRIPT }}' > ./scripts/start.sh

      - name: make main application.yml
        run: |
          sudo mkdir -p ./src/main/resources
          sudo chmod 777 ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.MAIN_YML }}" > ./application.yml 
          echo "${{ secrets.MAIN_DEV_YML }}" > ./application-dev.yml
          echo "${{ secrets.MAIN_PROD_YML }}" > ./application-prod.yml
          echo "${{ secrets.MAIN_STANDBY_YML }}" > ./application-standby.yml

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash

      - name: AWS credential 설정
        if: contains(github.ref, 'dev-standby')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload to AWS S3
        if: contains(github.ref, 'dev-standby')
        run: |
          aws deploy push \
             --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
             --ignore-hidden-files \
             --s3-location s3://$AWS_S3_BUCKET/build/$GITHUB_SHA.zip \
             --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        if: contains(github.ref, 'dev-standby')
        run: |
          aws deploy create-deployment \
             --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
             --deployment-config-name CodeDeployDefault.AllAtOnce \
             --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} \
             --s3-location bucket=$AWS_S3_BUCKET,key=build/$GITHUB_SHA.zip,bundleType=zip
